ServerName			"Nice FTP Server"
ServerType			standalone
ServerAdmin			root@localhost
DefaultServer		on
Port 21
UseReverseDNS      	off
MaxInstances		30
AuthPAM				off
#Trace DEFAULT:10 ssh2:20 sftp:20 scp:20
LogFormat         	default "%h %l %u %t \"%r\" %s %b"
LogFormat			auth    "%v [%P] %h %t \"%r\" %s"
LogFormat			write   "%h %l %u %t \"%r\" %s %b"

LoadModule mod_sql.c
LoadModule mod_sql_mysql.c
LoadModule mod_quotatab.c
LoadModule mod_quotatab_sql.c
LoadModule mod_sftp.c
LoadModule mod_tls.c

<Global>
	DeferWelcome		off
	#DisplayLogin		welcome.msg
	#DisplayFirstChdir	readme
	Umask 002 002
	TimeoutLogin        120
	TimeoutIdle        	600
	TimeoutNoTransfer  	900
	TimeoutStalled    	3600
	PassivePorts		%%PP_START%% %%PP_END%%
	TimesGMT			Off
	User				nobody
	Group				nogroup
	DefaultRoot			~
	MaxLoginAttempts	3
	MaxClients			50
	AllowOverwrite		yes
	IdentLookups       	off
	TransferLog			/var/sentora/logs/proftpd/xferlog.www
	ExtendedLog			/var/sentora/logs/proftpd/access.log WRITE,READ write
	ExtendedLog			/var/sentora/logs/proftpd/auth.log AUTH auth
	#ExtendedLog   		/var/sentora/logs/proftpd/paranoid.log ALL default
	TransferLog			/var/sentora/logs/proftpd/xferlog.legacy
	RootLogin off
	RequireValidShell off

	######################################################
	# SQL INFORMATION
	######################################################
	# The passwords in MySQL are encrypted using CRYPT
	SQLAuthTypes            Plaintext Crypt
	SQLAuthenticate         users groups

	# used to connect to the database
	# databasename@host database_user user_password
	SQLConnectInfo  sentora_proftpd@localhost proftpd %%PASSWD%%

	# Here we tell ProFTPd the names of the database columns in the "usertable"
	# we want it to interact with. Match the names with those in the db
	SQLUserInfo     ftpuser userid passwd uid gid homedir shell

	# Here we tell ProFTPd the names of the database columns in the "grouptable"
	# we want it to interact with. Again the names match with those in the db
	SQLGroupInfo    ftpgroup groupname gid members

	# Here we tell ProFTPd the names of the database columns in the "grouptable"
	# we want it to interact with. Again the names match with those in the db
	SQLGroupInfo    ftpgroup groupname gid members

	# set min UID and GID - otherwise these are 999 each
	SQLMinID        33

	# create a user's home directory on demand if it doesn't exist
	#SQLHomedirOnDemand on
	# CreateHome off

	# Update count every time user logs in
	SQLLog PASS updatecount
	SQLNamedQuery updatecount UPDATE "count=count+1, accessed=now() WHERE userid='%u'" ftpuser

	# Update modified everytime user uploads or deletes a file
	SQLLog  STOR,DELE modified
	SQLNamedQuery modified UPDATE "modified=now() WHERE userid='%u'" ftpuser

	# User quotas
	# ===========
	QuotaEngine on
	QuotaDirectoryTally on
	QuotaDisplayUnits Mb
	QuotaShowQuotas on

	SQLNamedQuery get-quota-limit SELECT "name, quota_type, per_session, limit_type, bytes_in_avail, bytes_out_avail, bytes_xfer_avail, files_in_avail, files_out_avail, files_xfer_avail FROM ftpquotalimits WHERE name = '%{0}' AND quota_type = '%{1}'"
	SQLNamedQuery get-quota-tally SELECT "name, quota_type, bytes_in_used, bytes_out_used, bytes_xfer_used, files_in_used, files_out_used, files_xfer_used FROM ftpquotatallies WHERE name = '%{0}' AND quota_type = '%{1}'"
	SQLNamedQuery update-quota-tally UPDATE "bytes_in_used = bytes_in_used + %{0}, bytes_out_used = bytes_out_used + %{1}, bytes_xfer_used = bytes_xfer_used + %{2}, files_in_used = files_in_used + %{3}, files_out_used = files_out_used + %{4}, files_xfer_used = files_xfer_used + %{5} WHERE name = '%{6}' AND quota_type = '%{7}'" ftpquotatallies
	SQLNamedQuery insert-quota-tally INSERT "%{0}, %{1}, %{2}, %{3}, %{4}, %{5}, %{6}, %{7}" ftpquotatallies
	QuotaLimitTable sql:/get-quota-limit
	QuotaTallyTable sql:/get-quota-tally/update-quota-tally/insert-quota-tally
</Global>


<IfModule mod_sftp.c>
  <VirtualHost %%LOCAL_IP%%>
		TLSRequired off
		ServerName "Nice sFTP Server"
		SFTPEngine on
		Port 115
		SFTPLog /var/sentora/logs/proftpd/sftp.log

		# Configure both the RSA and DSA host keys, using the same host key
		# files that OpenSSH uses.
		SFTPHostKey /etc/ssh/ssh_host_rsa_key
		SFTPHostKey /etc/ssh/ssh_host_dsa_key

		#SFTPAuthMethods publickey
		#SFTPAuthorizedUserKeys file:/etc/sentora/configs/proftpd/authorized_keys/%u
		SFTPAuthMethods password
		# Enable compression
		SFTPCompression delayed
  </VirtualHost>
</IfModule>

<IfModule mod_tls.c>
	TLSEngine					on
	TLSLog						/var/sentora/logs/proftpd/tls.log
	TLSProtocol					SSLv23
	TLSRSACertificateFile		%%CERT%%
	TLSRSACertificateKeyFile   	%%KEY%%
	#TLSCACertificateFile 		%%CA_CERT%%
	# ...or avoid CA cert and be verbose
	#TLSOptions					NoCertRequest EnableDiags 
	# ... or the same with relaxed session use for some clients (e.g. FireFtp)
	TLSOptions					NoCertRequest EnableDiags NoSessionReuseRequired
	# ... or drop connection if client tries to start a renegotiate
	#TLSOptions					AllowClientRenegotiations
	TLSVerifyClient				off
	TLSRequired					on
	TLSRenegotiate				required off
</IfModule>
